# This policy requires AWS IAM access keys to use PGP keys

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan

# Standard strings import
import "strings"

# Get all AWS IAM access keys
allIAMAccessKeys = plan.find_resources("aws_iam_access_key")

# Filter to AWS IAM access keys with violations
violatingIAMAccessKeys = {}
for allIAMAccessKeys as address, key {
  # Set the pgp_key variable, but set to null if undefined
  pgp_key = key.change.after.pgp_key else null
  # First, check if pgp_key is missing
  # Second, check if pgp_key does not start with "keybase:"
  # Add violators to violatingIAMAccessKeys and print warnings
  if pgp_key is null {
    violatingIAMAccessKeys[address] = key
    print(address, "does not have the pgp_key attribute set")
  } else if not strings.has_prefix(pgp_key, "keybase:") {
 #} else if ! strings.has_prefix(pgp_key, "keybase:") {
 #} else if strings.has_prefix(pgp_key, "keybase:") == false {
 #} else if strings.has_prefix(pgp_key, "keybase:") is false {
    violatingIAMAccessKeys[address] = key
    print(address, "has attribute pgp_key with value", pgp_key,
          "that does not start with 'keybase:'")
  }
}

# Count violations
violations = length(violatingIAMAccessKeys)

# Main rule
main = rule {
  violations is 0
}
